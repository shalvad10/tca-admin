{"ast":null,"code":"import appData from \"../Services/Data/AppData\";\nexport default class SharedMethods {\n  static concatName(name, surname) {\n    return `${name} ${surname}`;\n  }\n\n  static convertStringToArray(str, symb) {\n    let arr = str.split(symb);\n\n    for (let i = 0; i < arr.length; i++) {\n      arr[i] = Number.parseInt(arr[i]);\n    }\n\n    return arr;\n  }\n\n  static returnUserInfoForSections(users, avatars, idList) {\n    const usersArr = [];\n    users.forEach(user => {\n      if (idList.includes(user.id)) {\n        usersArr.push({\n          name: this.concatName(user.name, user.surname),\n          img: avatars[user.avatarID],\n          id: user.id\n        });\n      }\n    });\n    return usersArr;\n  }\n\n  static getPositions(service) {\n    service.getPositions(this.getToken(appData)).subscribe(data => {\n      data.forEach(position => {\n        position.status = position.isActive ? 'აქტიური' : 'პასიური';\n      });\n      appData.data.users.positions = data;\n    });\n  }\n\n  static addDaysToDate(date, days) {\n    let newDT = new Date(date);\n    newDT.setDate(newDT.getDate() + days);\n    const day = newDT.getDate();\n    const month = newDT.getMonth() + 1;\n    const year = newDT.getFullYear();\n    return `${day.toString().length < 2 ? 0 + day.toString() : day}.${month.toString().length < 2 ? 0 + month.toString() : month}.${year}`;\n  }\n\n  static getActivityName(url) {\n    switch (url) {\n      case 'Products/Create':\n        {\n          return {\n            type: 'create',\n            text: 'პროდუქციის შექმნა'\n          };\n        }\n\n      case 'Products/Delete':\n        {\n          return {\n            type: 'delete',\n            text: 'პროდუქტის წაშლა'\n          };\n        }\n\n      case 'Companies/Create':\n        {\n          return {\n            type: 'create',\n            text: 'კომპანიის რეგისტრაცია'\n          };\n        }\n\n      case 'Companies/Delete':\n        {\n          return {\n            type: 'delete',\n            text: 'კომპანიის წაშლა'\n          };\n        }\n\n      case 'Companies/Update':\n        {\n          return {\n            type: 'update',\n            text: 'კომპანიის რედაქტირება'\n          };\n        }\n\n      case 'ProductToBranches/Create':\n        {\n          return {\n            type: 'delete',\n            text: 'პროდუქტის შეტანა ფილიალში'\n          };\n        }\n\n      case 'ProductToBranches/Delete':\n        {\n          return {\n            type: 'delete',\n            text: 'პროდუქტის გატანა ფილიალიდან'\n          };\n        }\n\n      case 'Products/Delete':\n        {\n          return {\n            type: 'delete',\n            text: 'პროდუქტის წაშლა'\n          };\n        }\n\n      case 'Products/Delete':\n        {\n          return {\n            type: 'delete',\n            text: 'პროდუქტის წაშლა'\n          };\n        }\n\n      case 'Products/Delete':\n        {\n          return {\n            type: 'delete',\n            text: 'პროდუქტის წაშლა'\n          };\n        }\n\n      case 'Products/Delete':\n        {\n          return {\n            type: 'delete',\n            text: 'პროდუქტის წაშლა'\n          };\n        }\n\n      default:\n        {\n          return {\n            type: 'add',\n            text: '------------'\n          };\n        }\n    }\n  }\n\n  static isStoreView() {\n    return appData.data.view === 'storeView';\n  }\n\n  static loader(value) {\n    appData.data.loading = value;\n  }\n\n  static getAction(actionID) {\n    switch (actionID) {\n      case 11:\n        {\n          return 'პროდუქციის დამატება';\n        }\n\n      case 12:\n        {\n          return 'პროდუქციის განახლება';\n        }\n\n      case 13:\n        {\n          return 'პროდუქციის წაშლა';\n        }\n\n      case 21:\n        {\n          return 'მომხმარებლის დამატება';\n        }\n\n      case 22:\n        {\n          return 'მომხმარებლის განახლება';\n        }\n\n      case 23:\n        {\n          return 'მომხმარებლის წაშლა';\n        }\n\n      case 31:\n        {\n          return 'ფილიალის დამატება';\n        }\n\n      case 32:\n        {\n          return 'ფილიალის განახლება';\n        }\n\n      case 33:\n        {\n          return 'ფილიალის წაშლა';\n        }\n\n      case 41:\n        {\n          return 'კომპანიის დამატება';\n        }\n\n      case 42:\n        {\n          return 'კომპანიის განახლება';\n        }\n\n      case 43:\n        {\n          return 'კომპანიის წაშლა';\n        }\n    }\n  }\n\n  static sortByDate(arr) {\n    arr.sort(function (a, b) {\n      a = new Date(a.date);\n      b = new Date(b.date);\n      return a > b ? -1 : a < b ? 1 : 0;\n    });\n    return arr;\n  }\n\n  static getProducts(data, service, callback) {\n    service.getAll(this.getToken(data)).subscribe(data => {\n      callback(data.data);\n    });\n  }\n\n  static getProductsByStore(data, service, storeID, callback) {\n    service.getByStore(storeID, this.getToken(data)).subscribe(data => {\n      callback(data);\n    });\n  }\n\n  static getCompanies(data, service, callback) {\n    service.getAll(this.getToken(data)).subscribe(dt => {\n      callback(dt);\n    });\n  }\n\n  static getStores() {}\n\n  static getSectionsWithData(data, service) {\n    service.getAllWithData(this.getToken(data)).subscribe(dt => {\n      data.data.sections = dt;\n    });\n  }\n\n  static getReasonns(data, service) {\n    service.getReasons(this.getToken(data)).subscribe(dt => {\n      data.PRReasons = dt;\n    });\n  }\n\n  static getSections(data, service, callback) {\n    service.getAll(this.getToken(data)).subscribe(dt => {\n      callback(dt);\n    });\n  }\n\n  static getUsers(data, service, callback) {\n    service.allUsers(this.getToken(data)).subscribe(dt => {\n      callback(dt);\n    });\n  }\n\n  static getUsersByStore(data, storeID, service, callback) {\n    service.getByStore(storeID, this.getToken(data)).subscribe(dt => {\n      callback(dt);\n    });\n  }\n\n  static setInfoBoxes(dt, infoBoxes, type, fun) {\n    if (appData.data.loading == false) {\n      this.loader(true);\n    }\n\n    fun.subscribe(data => {\n      console.warn(data, type);\n\n      switch (type) {\n        case 'stores':\n          {\n            dt.data[type].allStores = data.data;\n            this.loader(false);\n            break;\n          }\n\n        case 'users':\n          {\n            dt.data.users.data = data.data;\n            this.loader(false);\n            break;\n          }\n\n        case 'companies':\n          {\n            dt.data.companies.data = data.data;\n            this.loader(false);\n            break;\n          }\n\n        default:\n          {\n            dt.data[type] = data.data;\n            this.loader(false);\n            break;\n          }\n      }\n\n      this.assignInfoboxes(type === 'users' ? data.totalRecords : data.data.length, type, infoBoxes);\n    });\n  }\n\n  static assignInfoboxes(data, boxID, infoBoxes) {\n    const infoBOX = infoBoxes.filter(box => box.id == boxID)[0];\n    infoBOX.content = data;\n  }\n\n  static getToken(data) {\n    let token = '';\n\n    if (data.data.currentUser.token) {\n      token = data.data.currentUser.token;\n    } else {\n      const authorizedUser = JSON.parse(window.localStorage.getItem('authorizedUser'));\n      token = authorizedUser.token;\n    }\n\n    return token;\n  }\n\n  static getModifiedDate(date) {\n    const dt = new Date(date);\n    const day = dt.getDate();\n    const year = dt.getFullYear();\n    const monthInd = dt.getMonth();\n    const months = ['იან.', 'თებ.', 'მარ.', 'აპრ.', 'მაი.', 'ივნ.', 'ივლ.', 'აგვ.', 'სექ.', 'ოქტ.', 'ნოე.', 'დეკ.'];\n    return `${day} ${months[monthInd]} ${year}`;\n  }\n\n  static getHoursFromDate(date) {\n    const dt = new Date(date);\n    const hours = dt.getHours();\n    const minutes = dt.getMinutes() >= 10 ? dt.getMinutes() : '0' + dt.getMinutes();\n    return `${hours}:${minutes}`;\n  }\n\n  static calculateDays(date1, date2 = null, getWorkingDays = false) {\n    const dt1 = new Date(date1);\n    const dt2 = date2 !== null ? new Date(date2) : new Date(); // Validate input\n\n    if (dt2 < dt1) return 0; // Calculate days between dates\n\n    var millisecondsPerDay = 86400 * 1000; // Day in milliseconds\n\n    dt1.setHours(0, 0, 0, 1); // Start just after midnight\n\n    dt2.setHours(23, 59, 59, 999); // End just before midnight\n\n    var diff = dt2 - dt1; // Milliseconds between datetime objects\n\n    var days = Math.ceil(diff / millisecondsPerDay);\n\n    if (getWorkingDays) {\n      // Subtract two weekend days for every week in between\n      var weeks = Math.floor(days / 7);\n      days = days - weeks * 2; // Handle special cases\n\n      var startDay = dt1.getDay();\n      var endDay = dt2.getDay(); // Remove weekend not previously removed.\n\n      if (startDay - endDay > 1) days = days - 2; // Remove start day if span starts on Sunday but ends before Saturday\n\n      if (startDay == 0 && endDay != 6) days = days - 1; // Remove end day if span ends on Saturday but starts after Sunday\n\n      if (endDay == 6 && startDay != 0) days = days - 1;\n    }\n\n    return days;\n  }\n\n  static isSuccess(data) {\n    return data.status === 'SUCCESS';\n  }\n\n  static alertNotification(toastr, type, data) {\n    switch (type) {\n      case 'info':\n        {\n          toastr.info(data.text);\n          break;\n        }\n\n      case 'success':\n        {\n          toastr.success(data.text);\n          break;\n        }\n\n      case 'warning':\n        {\n          toastr.warning(data.text);\n          break;\n        }\n\n      case 'danger':\n        {\n          toastr.error(data.text);\n          break;\n        }\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}