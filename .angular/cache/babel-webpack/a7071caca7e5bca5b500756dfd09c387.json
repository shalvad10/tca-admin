{"ast":null,"code":"import { AppEnums } from 'src/app/Enums/appEnums';\nimport SharedMethods from 'src/app/Helpers/SharedMethods';\nimport appData from 'src/app/Services/Data/AppData';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"src/app/Services/Http/user.service\";\nimport * as i3 from \"src/app/Services/Http/sections.service\";\nimport * as i4 from \"src/app/Services/Http/magazines.service\";\nimport * as i5 from \"src/app/Services/Http/company.service\";\nimport * as i6 from \"src/app/Services/Http/products.service\";\nimport * as i7 from \"src/app/Services/Http/reasons.service\";\nimport * as i8 from \"src/app/Services/Http/magazine-branches.service\";\nexport let ConfirmComponent = /*#__PURE__*/(() => {\n  class ConfirmComponent {\n    constructor(toastr, userService, sectionsService, magazineService, companyService, productsService, reasonsService, magazineBranchService) {\n      this.toastr = toastr;\n      this.userService = userService;\n      this.sectionsService = sectionsService;\n      this.magazineService = magazineService;\n      this.companyService = companyService;\n      this.productsService = productsService;\n      this.reasonsService = reasonsService;\n      this.magazineBranchService = magazineBranchService;\n    }\n\n    ngOnInit() {}\n\n    get typeName() {\n      switch (this.modalParams.typeID) {\n        case 1:\n          {\n            return 'პროდუქტის';\n          }\n\n        case 2:\n          {\n            return 'მომხმარებლის';\n          }\n\n        case 3:\n          {\n            return 'ფილიალის';\n          }\n\n        case 4:\n          {\n            return 'კომპანიის';\n          }\n\n        case 5:\n          {\n            return 'სექციის';\n          }\n\n        case 6:\n          {\n            return 'მიზეზის';\n          }\n\n        case 8:\n          {\n            return 'პოზიციის';\n          }\n      }\n    }\n\n    get typeAction() {\n      if (this.modalParams.activityID === AppEnums.activityID.user_DFSTORE) {\n        return 'ამოშლა ფილიალიდან?';\n      }\n\n      if (this.modalParams.activityID === AppEnums.activityID.user_DFSECTION) {\n        return 'ამოშლა სექციიდან?';\n      }\n\n      return 'წაშლა?';\n    }\n\n    deny() {\n      appData.data.modal.currentModal = '';\n    }\n\n    confirm() {\n      SharedMethods.loader(true);\n\n      switch (this.modalParams.typeID) {\n        case AppEnums.main.product:\n          {\n            this.deleteProduct(this.modalParams.targetID);\n            break;\n          }\n\n        case AppEnums.main.user:\n          {\n            this.deleteUser();\n            break;\n          }\n\n        case AppEnums.main.userRole:\n          {\n            this.deleteUser();\n            break;\n          }\n\n        case AppEnums.main.store:\n          {\n            this.deleteStore(this.modalParams.targetID);\n            break;\n          }\n\n        case AppEnums.main.storeBranch:\n          {\n            this.deleteStoreBranch(this.modalParams.targetID);\n            break;\n          }\n\n        case AppEnums.main.company:\n          {\n            this.deleteCompany(this.modalParams.targetID);\n            break;\n          }\n\n        case AppEnums.main.section:\n          {\n            this.deleteSection(this.modalParams.targetID);\n            break;\n          }\n      }\n    }\n\n    deleteProduct(id) {\n      this.productsService.delete(id, SharedMethods.getToken(appData)).subscribe(data => {\n        console.warn(data);\n\n        if (SharedMethods.isSuccess(data)) {\n          SharedMethods.loader(false);\n          appData.data.modal.currentModal = '';\n          SharedMethods.alertNotification(this.toastr, 'success', {\n            text: `ოპერაცია წარმატებით განხორციელდა`\n          });\n          appData.data.products = [].concat(appData.data.products.filter(product => product.id !== id));\n        }\n      });\n    }\n\n    deleteSection(id) {\n      this.sectionsService.delete(id, SharedMethods.getToken(appData)).subscribe(dt => {\n        if (SharedMethods.isSuccess(dt)) {\n          SharedMethods.loader(false);\n          appData.data.modal.currentModal = '';\n          SharedMethods.alertNotification(this.toastr, 'success', {\n            text: `ოპერაცია წარმატებით განხორციელდა`\n          });\n          appData.data.sections = [].concat(appData.data.sections.filter(section => section.id !== id));\n        }\n      });\n    }\n\n    deleteUser() {\n      switch (this.modalParams.activityID) {\n        case AppEnums.activityID.user_DELETE:\n          {\n            break;\n          }\n\n        case AppEnums.activityID.user_DFSTORE:\n          {\n            this.userService.removeFromStore(this.modalParams.data.userID, SharedMethods.getToken(appData)).subscribe(dt => {\n              if (SharedMethods.isSuccess(dt)) {\n                SharedMethods.loader(false);\n                appData.data.stores.selectedStore.users = appData.data.stores.selectedStore.users.filter(usr => usr.id !== this.modalParams.data.userID);\n                appData.data.modal.currentModal = '';\n              }\n            });\n            break;\n          }\n\n        case AppEnums.activityID.user_DFSECTION:\n          {\n            this.userService.removeFromSection(this.modalParams.data.userID, this.modalParams.data.sectionID, SharedMethods.getToken(appData)).subscribe(dt => {\n              if (SharedMethods.isSuccess(dt)) {\n                SharedMethods.loader(false);\n                appData.data.modal.currentModal = '';\n                SharedMethods.getSectionsWithData(appData, this.sectionsService);\n              }\n            });\n            break;\n          }\n\n        case AppEnums.activityID.reasons_DELETE:\n          {\n            this.reasonsService.delete(this.modalParams.data.userID, SharedMethods.getToken(appData)).subscribe(dt => {\n              if (SharedMethods.isSuccess(dt)) {\n                SharedMethods.loader(false);\n                appData.data.modal.currentModal = '';\n                SharedMethods.getSectionsWithData(appData, this.productsService);\n              }\n            });\n            break;\n          }\n\n        case AppEnums.activityID.user_DELROLE:\n          {\n            this.userService.deleteUserRole(this.modalParams.data.roleID, SharedMethods.getToken(appData)).subscribe(dt => {\n              console.warn(dt);\n\n              if (SharedMethods.isSuccess(dt)) {\n                SharedMethods.alertNotification(this.toastr, 'success', {\n                  text: `ოპერაცია წარმატებით განხორციელდა`\n                });\n                SharedMethods.getPositions(this.userService);\n                SharedMethods.loader(false);\n                appData.data.modal.currentModal = '';\n              }\n            });\n            break;\n          }\n      }\n    }\n\n    deleteStore(id) {\n      this.magazineService.delete(id, SharedMethods.getToken(appData)).subscribe(dt => {\n        if (SharedMethods.isSuccess(dt)) {\n          SharedMethods.loader(false);\n          appData.data.modal.currentModal = '';\n          SharedMethods.alertNotification(this.toastr, 'success', {\n            text: `ოპერაცია წარმატებით განხორციელდა`\n          });\n          appData.data.stores.allStores = appData.data.stores.allStores.filter(store => store.id !== id);\n        }\n      });\n    }\n\n    deleteStoreBranch(id) {\n      this.magazineBranchService.delete(id, SharedMethods.getToken(appData)).subscribe(dt => {\n        if (SharedMethods.isSuccess(dt)) {\n          SharedMethods.loader(false);\n          appData.data.modal.currentModal = '';\n          SharedMethods.alertNotification(this.toastr, 'success', {\n            text: `ოპერაცია წარმატებით განხორციელდა`\n          });\n          appData.data.stores.allStores = appData.data.stores.allStores.filter(store => store.id !== id);\n        }\n      });\n    }\n\n    deleteCompany(id) {\n      this.companyService.delete(id, SharedMethods.getToken(appData)).subscribe(res => {\n        if (SharedMethods.isSuccess(res)) {\n          SharedMethods.loader(false);\n          appData.data.modal.currentModal = '';\n          SharedMethods.alertNotification(this.toastr, 'success', {\n            text: `ოპერაცია წარმატებით განხორციელდა`\n          });\n          appData.data.companies.data = appData.data.companies.data.filter(company => company.id !== id);\n        }\n      });\n      ;\n    }\n\n  }\n\n  ConfirmComponent.ɵfac = function ConfirmComponent_Factory(t) {\n    return new (t || ConfirmComponent)(i0.ɵɵdirectiveInject(i1.ToastrService), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.SectionsService), i0.ɵɵdirectiveInject(i4.MagazinesService), i0.ɵɵdirectiveInject(i5.CompanyService), i0.ɵɵdirectiveInject(i6.ProductsService), i0.ɵɵdirectiveInject(i7.ReasonsService), i0.ɵɵdirectiveInject(i8.MagazineBranchesService));\n  };\n\n  ConfirmComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ConfirmComponent,\n    selectors: [[\"modal-confirm\"]],\n    inputs: {\n      modalParams: \"modalParams\"\n    },\n    decls: 12,\n    vars: 3,\n    consts: [[1, \"content\"], [1, \"row\"], [1, \"font_geo\", \"small_font\"], [1, \"action\"], [1, \"btn\", \"btn-success\", \"font_geo\", \"medium_font\", 3, \"click\"], [1, \"btn\", \"btn-danger\", \"font_geo\", \"medium_font\", 3, \"click\"]],\n    template: function ConfirmComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"span\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementStart(4, \"span\", 3);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 1);\n        i0.ɵɵelementStart(8, \"div\", 4);\n        i0.ɵɵlistener(\"click\", function ConfirmComponent_Template_div_click_8_listener() {\n          return ctx.confirm();\n        });\n        i0.ɵɵtext(9, \" \\u10D3\\u10D0\\u10D3\\u10D0\\u10E1\\u10E2\\u10E3\\u10E0\\u10D4\\u10D1\\u10D0 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 5);\n        i0.ɵɵlistener(\"click\", function ConfirmComponent_Template_div_click_10_listener() {\n          return ctx.deny();\n        });\n        i0.ɵɵtext(11, \" \\u10E3\\u10D0\\u10E0\\u10E7\\u10DD\\u10E4\\u10D0 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \\u10DC\\u10D0\\u10DB\\u10D3\\u10D5\\u10D8\\u10DA\\u10D0\\u10D3 \\u10D2\\u10E1\\u10E3\\u10E0\\u10D7 \", ctx.typeName, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.modalParams.targetName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.typeAction, \" \");\n      }\n    },\n    styles: [\".content[_ngcontent-%COMP%]{width:400px;height:170px;background-color:#fff;border-radius:15px;display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center}.content[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]{margin:5px}.content[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{margin:10px}.content[_ngcontent-%COMP%]   .action[_ngcontent-%COMP%]{font-size:16px;color:red}\"]\n  });\n  return ConfirmComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}