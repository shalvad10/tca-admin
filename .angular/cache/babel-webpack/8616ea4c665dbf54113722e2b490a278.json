{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ReasonsService = /*#__PURE__*/(() => {\n  class ReasonsService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getAll(token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/StaticEntities/ReasonForOutOfStocks`, {\n        headers: headers\n      });\n    }\n\n    getSingle(ID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/StaticEntities/ReasonForOutOfStocks/${ID}`, {\n        headers: headers\n      });\n    }\n\n    create(name, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.post(`${environment.connectionURL}/StaticEntities`, {\n        name: name,\n        isActive: true\n      }, {\n        headers: headers\n      });\n    }\n\n    delete(Id, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.delete(`${environment.connectionURL}/StaticEntities/ReasonForOutOfStock/${Id}`, {\n        headers: headers\n      });\n    }\n\n    edit(name, isActive, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.put(`${environment.connectionURL}/StaticEntities/ReasonForOutOfStockUpdate`, {\n        name: name,\n        isActive: isActive\n      }, {\n        headers: headers\n      });\n    }\n\n  }\n\n  ReasonsService.ɵfac = function ReasonsService_Factory(t) {\n    return new (t || ReasonsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ReasonsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReasonsService,\n    factory: ReasonsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ReasonsService;\n})();","map":null,"metadata":{},"sourceType":"module"}