{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from './../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    allUsers(token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/Users`, {\n        headers: headers\n      });\n    }\n\n    getUserPosition(positionID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/Users/PositionGet/${positionID}`, {\n        headers: headers\n      });\n    }\n\n    getByID(id, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/Users/${id}`, {\n        headers: headers\n      });\n    }\n\n    getActivities(id, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/Users/Activity/${id}`, {\n        headers: headers\n      });\n    }\n\n    authenticate(username, password) {\n      return this.http.post(`${environment.connectionURL}/Users/authenticate`, {\n        username: username,\n        password: password\n      });\n    }\n\n    delete(id, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.delete(`${environment.connectionURL}/Users/${id}`, {\n        headers: headers\n      });\n    }\n\n    register(name, surname, nickname, email, password, avatarID, mobile, magazineBranchId, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.post(`${environment.connectionURL}/Users/register`, {\n        firstName: name,\n        lastName: surname,\n        username: nickname,\n        password: password,\n        email: email,\n        avatar: avatarID,\n        mobileNumber: mobile,\n        magazineBranchId: magazineBranchId,\n        positionId: 1\n      }, {\n        headers: headers\n      });\n    }\n\n    editUser(name, surname, nickname, email, password, avatarID, mobile, magazineBranchId, userID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.put(`${environment.connectionURL}/Users/${userID}`, {\n        firstName: name,\n        lastName: surname,\n        username: nickname,\n        password: password,\n        email: email,\n        avatar: avatarID,\n        mobileNumber: mobile,\n        magazineBranchId: magazineBranchId\n      }, {\n        headers: headers\n      });\n    }\n\n    registerToStore(userID, positionID, storeID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.post(`${environment.connectionURL}/Users/UserReferenceCreate`, {\n        userId: userID,\n        magazineBranchId: storeID,\n        positionId: positionID\n      }, {\n        headers: headers\n      });\n    }\n\n    getByStore(storeID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/MagazineBranches/${storeID}/users`, {\n        headers: headers\n      });\n    }\n\n    removeFromStore(userID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.delete(`${environment.connectionURL}/Users/UserReferenceRemove/${userID}`, {\n        headers: headers\n      });\n    }\n\n    registerToSection(userID, sectionID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.post(`${environment.connectionURL}/ResponsiblePersonsForProducts`, [{\n        userId: userID,\n        responsiblePersonsGroupId: sectionID\n      }], {\n        headers: headers\n      });\n    }\n\n    removeFromSection(UserId, GroupId, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.delete(`${environment.connectionURL}/ResponsiblePersonsForProducts/?UserId=${UserId}&GroupId=${GroupId}`, {\n        headers: headers\n      });\n    }\n\n    getPositions(token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/Users/Positions`, {\n        headers: headers\n      });\n    }\n\n    getSinglePosition(id, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/Users/PositionGet/${id}`, {\n        headers: headers\n      });\n    }\n\n    getUserRoles(token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/Users/RoleList`, {\n        headers: headers\n      });\n    }\n\n    setUserRole(userID, roleID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.post(`${environment.connectionURL}/Users/SetRole`, {\n        userId: userID,\n        roleId: roleID\n      }, {\n        headers: headers\n      });\n    }\n\n    deleteUserRole(usedRoleID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.delete(`${environment.connectionURL}/Users/DeleteRole?Id=${usedRoleID}`, {\n        headers: headers\n      });\n    }\n\n    getUsersWithRoles(id, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/Users/UsedRole?userId=${id}`, {\n        headers: headers\n      });\n    }\n\n    createPosition(name, isActive, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.post(`${environment.connectionURL}/Users/PositionCreate`, {\n        name: name,\n        isActive: isActive\n      }, {\n        headers: headers\n      });\n    }\n\n    updatePosition(roleID, name, isActive, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.put(`${environment.connectionURL}/Users/PositionUpdate`, {\n        id: roleID,\n        name: name,\n        isActive: isActive\n      }, {\n        headers: headers\n      });\n    }\n\n    removePosition(roleID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.delete(`${environment.connectionURL}/Users/PositionRemove/${roleID}`, {\n        headers: headers\n      });\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}