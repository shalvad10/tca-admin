{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from './../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductsService = /*#__PURE__*/(() => {\n  class ProductsService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    add(code, name, companyID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.post(`${environment.connectionURL}/Products`, {\n        identificationCode: code,\n        name: name,\n        companyId: companyID\n      }, {\n        headers: headers\n      });\n    }\n\n    import(params, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.post(`${environment.connectionURL}/ProductToBranches`, params, {\n        headers: headers\n      });\n    }\n\n    getAll(token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/Products`, {\n        headers: headers\n      });\n    }\n\n    getSingle(ID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/Products/${ID}`, {\n        headers: headers\n      });\n    }\n\n    getByStore(storeID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/ProductToBranches/${storeID}/ProductsWithTerm`, {\n        headers: headers\n      });\n    }\n\n    delete(Id, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.delete(`${environment.connectionURL}/Products/${Id}`, {\n        headers: headers\n      });\n    }\n\n    edit(id, code, name, companyID, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.put(`${environment.connectionURL}/Products`, {\n        id: id,\n        identificationCode: code,\n        name: name,\n        companyId: companyID\n      }, {\n        headers: headers\n      });\n    }\n\n    removeProduct(productID, reasonID, quantity, token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.post(`${environment.connectionURL}/ProductToBranches/OutOfStockCreate`, {\n        id: 0,\n        isOutOfStock: true,\n        outOfStockReason: \"remove\",\n        productToBranchId: productID,\n        reasonForOutOfStockId: reasonID,\n        quantity: quantity\n      }, {\n        headers: headers\n      });\n    }\n\n    getLogs(token) {\n      let headerSettings = {};\n      headerSettings['Authorization'] = `Bearer ${token}`;\n      let headers = new HttpHeaders(headerSettings);\n      return this.http.get(`${environment.connectionURL}/ProductToBranches/OutOfStocks`, {\n        headers: headers\n      });\n    }\n\n  }\n\n  ProductsService.ɵfac = function ProductsService_Factory(t) {\n    return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductsService,\n    factory: ProductsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductsService;\n})();","map":null,"metadata":{},"sourceType":"module"}