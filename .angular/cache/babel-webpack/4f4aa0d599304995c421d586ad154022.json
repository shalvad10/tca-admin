{"ast":null,"code":"import SharedMethods from './Helpers/SharedMethods';\nimport appData from './Services/Data/AppData';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./Services/Http/user.service\";\nimport * as i3 from \"@ng-select/ng-select\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"./Modals/app-modal.component\";\nimport * as i6 from \"./Components/loader/loader.component\";\n\nfunction AppComponent_router_outlet_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"router-outlet\");\n  }\n}\n\nfunction AppComponent_app_modal_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-modal\", 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"modal\", ctx_r1.modalParams);\n  }\n}\n\nfunction AppComponent_app_loader_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-loader\");\n  }\n}\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(router, userService, config) {\n      this.router = router;\n      this.userService = userService;\n      this.config = config;\n      this.title = 'tca-front';\n      this.appLoaded = false;\n      this.config.notFoundText = 'Custom not found';\n      this.config.appendTo = 'body'; // set the bindValue to global config when you use the same \n      // bindValue in most of the place. \n      // You can also override bindValue for the specified template \n      // by defining `bindValue` as property\n      // Eg : <ng-select bindValue=\"some-new-value\"></ng-select>\n\n      this.config.bindValue = 'value';\n    }\n\n    onPopState(event) {\n      console.log(this.router.url);\n    }\n\n    hasAttributeInHierarchy(el, attr) {\n      if (el) {\n        if (el.getAttribute(attr)) {\n          return true;\n        }\n\n        return this.hasAttributeInHierarchy(el.parentElement, attr);\n      }\n\n      return false;\n    }\n\n    notMenuIcon(e) {\n      return !e.target.classList.contains('nav-item') && !e.target.classList.contains('nav-links') && !e.target.classList.contains('fa-bars');\n    }\n\n    ngOnInit() {\n      SharedMethods.loader(true);\n      const authorizedUser = JSON.parse(window.localStorage.getItem('authorizedUser'));\n\n      if (authorizedUser === null) {\n        this.appLoaded = true;\n        SharedMethods.loader(false);\n        this.router.navigateByUrl('/users/auth');\n      } else {\n        this.userService.getByID(authorizedUser.id, authorizedUser.token).subscribe(dt => {\n          if (dt) {\n            console.warn(dt);\n            appData.data.currentUser = {\n              id: dt.id,\n              avatarID: dt.avatar ? Number.parseInt(dt.avatar) : 0,\n              email: dt.email,\n              magazineBranchId: dt.magazineBranchId,\n              mobileNumber: dt.mobileNumber,\n              positionId: dt.positionId,\n              firstName: dt.firstName,\n              lastName: dt.lastName,\n              username: dt.username,\n              token: authorizedUser.token\n            };\n            appData.data.view = dt.positionId === null ? 'headView' : 'storeView';\n            this.appLoaded = true; // SharedMethods.loader(false);\n          }\n        }, err => {\n          if (err.statusText === 'Unauthorized') {\n            this.appLoaded = true;\n            this.router.navigateByUrl('/users/auth');\n          }\n        });\n      }\n\n      document.addEventListener('click', e => {\n        if (this.notMenuIcon(e)) {\n          if (document.body.classList.contains('sidebar-open')) {\n            if (!this.hasAttributeInHierarchy(e.target, 'stayAlive')) {\n              document.body.classList.remove('sidebar-open');\n              document.body.classList.add('sidebar-collapse');\n            }\n          }\n        }\n      });\n\n      if (window.innerWidth <= 991) {\n        document.body.classList.remove('sidebar-open');\n        document.body.classList.add('sidebar-collapse');\n      }\n    }\n\n    get modal() {\n      return appData.data.modal.currentModal;\n    }\n\n    get modalParams() {\n      return appData.data.modal.modals[appData.data.modal.currentModal];\n    }\n\n    get isLoading() {\n      return appData.data.loading;\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.NgSelectConfig));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    hostBindings: function AppComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"popstate\", function AppComponent_popstate_HostBindingHandler($event) {\n          return ctx.onPopState($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 3,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [3, \"modal\", 4, \"ngIf\"], [3, \"modal\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AppComponent_router_outlet_0_Template, 1, 0, \"router-outlet\", 0);\n        i0.ɵɵtemplate(1, AppComponent_app_modal_1_Template, 1, 1, \"app-modal\", 1);\n        i0.ɵɵtemplate(2, AppComponent_app_loader_2_Template, 1, 0, \"app-loader\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.appLoaded);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.modal !== \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      }\n    },\n    directives: [i4.NgIf, i1.RouterOutlet, i5.AppModalComponent, i6.LoaderComponent],\n    styles: [\"\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}